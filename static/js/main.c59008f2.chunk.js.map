{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","robots.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","id","email","react_default","a","createElement","className","src","concat","alt","CardList","_ref","robots","map","user","i","Components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","console","log","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","length","Components_SearchBox","Components_Scroll","Components_CardList","Component","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c59008f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card= (props) => {\r\n\tconst {name, id,email}=props;\r\n\treturn(\r\n\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow'>\r\n\t\t\r\n\t\t<div>\r\n\t\t\t<img src={`https://robohash.org/${id}?200x200'`} alt='Robo card'/>\r\n\t\t\t<div>\t\r\n\t\t\t\t<h1>{name}</h1>\r\n\t\t\t\t<p>{email}</p>\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList= ({ robots }) => {\r\n\treturn( \r\n\t\t<div>\t\r\n\t\t{\r\n\t\trobots.map((user,i) => {\r\n\t\treturn( \r\n\t\t<Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}\r\n\t\t/>\r\n\t);\r\n})\r\n}\r\n</div>\r\n);\t\r\n}\r\n\r\nexport default CardList;\r\n","\r\nexport const robots=[{\r\n\tid:0,\r\n\tname:'rahul',\r\n\temail:'rahulpillai@gmail.com',\r\n},\r\n{\r\n\tid:1,\r\n\tname:'gaurvsavant',\r\n\temail:'gs34sd@gmail.com',\r\n},\r\n{\r\n\tid:2,\r\n\tname:'ishakadam',\r\n\temail:'ips28@gmail.com',\r\n}, \r\n{\r\n\tid:3,\r\n\tname:'prachilii',\r\n\temail:'pillirox25@pilli.com',\r\n},\r\n{\r\n\tid:4,\r\n\tname:'bittu',\r\n\temail:'babubhai@bittuboss.com',\r\n\r\n},\r\n{\r\n\tid:5,\r\n\tname:'pritesh',\r\n\temail:'pritesh@gmail.com',\r\n},\r\n{\r\n\tid:6,\r\n\tname:'Omkaar',\r\n\temail:'omkF@gmail.com',\r\n},\r\n{\r\n\tid:7,\r\n\tname:'nikhil!',\r\n\temail:'niks@gmail.com',\r\n},\r\n{\r\n\tid:8,\r\n\tname:'swaraj sonar',\r\n\temail:'swason@gmail.com',\r\n},\r\n];\r\n","import React from 'react';\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='Search Robos...'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t\t/>\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n  \t\t<div style={{overflowY:'scroll' ,border:'1px solid blue', height:'400px' }}>\r\n  \t\t\t {props.children}\r\n  \t\t</div>\r\n  \t);\r\n}\r\n\r\nexport default Scroll;","import React,{Component}  from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport {robots} from '../robots';\r\nimport SearchBox from '../Components/SearchBox'\r\nimport Scroll from '../Components/Scroll'\r\nimport './App.css'\r\n\r\nclass App extends Component{\r\nconstructor(){\r\nsuper()\r\nthis.state={\r\nrobots: [] ,\r\nsearchfield:''\r\n}\r\n}\r\ncomponentDidMount(){\r\n\tconsole.log('before fetch');\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(users => {\r\n\t\t\tthis.setState({ robots : robots});\t\r\n\t\t});\t\r\n}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield : event.target.value})\r\n\t }\r\n\trender(){\r\n\t\tconst filteredRobots=this.state.robots.filter(robots=>{\r\n\t\treturn (robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()));\r\n\t\t})\r\n\t\tif(this.state.robots.length===0){\r\n\t\t\treturn <h1>L O A D I N G . . . . . .</h1>\r\n\t\t}\r\n\t\telse{\r\n\t return(\r\n\t\t<div className='tc'>\r\n\t\t\t<h1>ROBODOST</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import {robots} from '../C/robots'\nimport App from './Containers/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}